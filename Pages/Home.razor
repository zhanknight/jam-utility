@page "/"
@using JamUtility.Models
@using JamUtility.Components
@using JamUtility.Utilities
@using JamUtility.Services
@inject IScaleLibrary ScaleLibrary

<PageTitle>Jam Utility</PageTitle>

<div class="container">


    <div class="mx-auto" style="width: 300px;">
        <PianoKeys ParentMethod="ParentMethod" />

    <p role="status" class="mx-auto">Scale count: @x.Count</p>

    <button class="btn btn-primary" @onclick="ShuffleScales">Shuffle Scales</button>

        <button class="btn btn-primary" @onclick="() => FilterIt(selectedNotees)">Filter Scales</button>

    </div>

</div>


<div class="container">
    <div class="row">
        @foreach (var y in x)
        {
            <div class="col-sm m-1">
                <ScaleCard scale=y  />
            </div>

        }
    </div>
</div>



@code {

    List<Scale> x = new List<Scale>();

    List<string> selectedNotees = new();

    protected override async Task OnInitializedAsync()
    {
        x = await ScaleLibrary.GetScalesAsync();
    }

    private void ShuffleScales()
    {
        x = x.OrderBy(s => Random.Shared.Next()).ToList();
    }

    private  void AddNoteToFilter(string note)
    {
        selectedNotees.Add(note);
    }

    private async void FilterIt(List<string> notes)
    {
        await ScaleLibrary.FilterScales(notes);
        x = await ScaleLibrary.GetScalesAsync();
    }


    private string message = string.Empty;

    private void ParentMethod(string message)
    {
        Console.WriteLine(message);
        AddNoteToFilter(message);
    }
}