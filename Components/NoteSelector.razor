@using JamUtility.Models
@using JamUtility.Services
@using JamUtility.Utilities
@inject IScaleLibrary ScaleLibrary

<div class="container">
    <div class="row shadow-sm mb-2 mt-2">
        @foreach (var note in allNotes)
        {
            if (note.Contains("#"))
            {
                <div class="col border p-0 text-center @(localSelectedNotes.Contains(note) ? "bg-info" : "bg-light")" @onclick="@(() => CallMethodParent(note))">@note</div>
            }
            else
            {
                <div class="col border p-0 text-center @(localSelectedNotes.Contains(note) ? "bg-info" : "bg-white")" @onclick="@(() => CallMethodParent(note))">@note</div>
            }
        }
    </div>
</div>



@code {
    [Parameter]
    public EventCallback<string> ParentMethod { get; set; }

    List<string> allNotes = new List<string>();

    List<string> localSelectedNotes = new List<string>();

    protected override void OnInitialized()
    {
        allNotes = ScaleBuilder.AllNotes().Distinct().ToList();
        localSelectedNotes = ScaleLibrary.GetSelectedNotes();
    }

    private void ToggleSelected(string note)
    {
        if (localSelectedNotes.Contains(note))
        {
            localSelectedNotes.Remove(note);
            ScaleLibrary.SetSelectedNotes(localSelectedNotes);
        }
        else
        {
            localSelectedNotes.Add(note);
            ScaleLibrary.SetSelectedNotes(localSelectedNotes);
        }
    }

    private async Task CallMethodParent(string clickedNote)
    {
        ToggleSelected(clickedNote);       
        if (ParentMethod.HasDelegate)
        {
            await ParentMethod.InvokeAsync();
        }
    }
}