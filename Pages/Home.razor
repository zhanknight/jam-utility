@page "/"
@using JamUtility.Models
@using JamUtility.Components
@using JamUtility.Utilities
@using JamUtility.Services
@inject IScaleLibrary ScaleLibrary

<PageTitle>Jam Utility</PageTitle>

<div class="container">




        <NoteSelector ParentMethod="HandleNoteSelections" />

        <p role="status" class="mx-auto">Scale count: @activeScales.Count</p>

    <button class="btn btn-primary" @onclick="ShuffleScales">Shuffle Scales</button>



</div>


<div class="container">
    <div class="row">
        @foreach (var sc in activeScales)
        {
            <div class="col-sm m-1">
                <ScaleCard scale=sc />
            </div>

        }
    </div>
</div>



@code {

    List<Scale> activeScales = new List<Scale>();

    List<string> selectedNotees = new();

    protected override async Task OnInitializedAsync()
    {
        activeScales = ScaleLibrary.InitializeScales();
    }

    private void ShuffleScales()
    {
        activeScales = activeScales.OrderBy(s => Random.Shared.Next()).ToList();
    }

    private  void AddNoteToFilter(string note)
    {
        selectedNotees.Add(note);
    }

    private void RemoveNoteFromFilter(string note)
    {
        selectedNotees.Remove(note);
    }

    private void FilterIt(List<string> notes)
    {
        ScaleLibrary.FilterScales(notes);
        activeScales = ScaleLibrary.GetActiveScales();
    }

    private void HandleNoteSelections(string message)
    {
        if (selectedNotees.Contains(message))
        {
            RemoveNoteFromFilter(message);
        }
        else 
        {
            AddNoteToFilter(message);
        }

        Console.WriteLine(message);

        FilterIt(selectedNotees);
    }
}